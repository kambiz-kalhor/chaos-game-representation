#!/usr/bin/env python
# coding: utf-8

# # HERE ARE MY SEQUENCES

# In[252]:


id_1 = 'test1'
seq_1 = 'A'


# In[253]:


id_2 = 'test1'
seq_2 = 'AW'


# In[254]:


id_3 = 'test1'
seq_3 = 'AWT'


# In[255]:


id_4 = 'test1'
seq_4 = 'AWTA'


# In[256]:


id_5 = 'albumin_Globular Proteins'
seq_5 = 'AALLVALLFVANAAAFRTTITTMEIDEDIDNPRRRGEGCREQIQRQQNLNHCQYYLRQQSRSGGYDEDNQRQHFRQCCQQLSQMDEQCQCEGLRQVVRRQQQQQGLRGEEMEEMVQSARDLPNECGISSQRCEIRRSWF'


# In[257]:


id_6 = 'actin Fibrous Proteins'
seq_6 ='MCEEETTALVCDNGSGLCKAGFAGDDAPRAVFPSIVGRPRHQGVMVGMGQKDSYVGDEAQSKRGILTLKYPIEREKMTQIMFETFNVPAMYVAIQAVLSLYASGRTTGIVLDSGDGVTHNVPIYEGYALPHAIMRLDLAGRDLTDYLMKILTERGYSFVTTAEREIVRDIKEKLCYVALDFENEMATAASSSSLEKSYELPDGQVITIGNERFRCPETLFQPSFIGMESAGIHETTYNSIMKCDIDIRKDLYANNVLSGGTTMYPGIADRMQKEITALAPSTMKIKIIAPPERKYSVWIGGSILASLSTFQQMWISKPEYDEAGPSIVHRKCF'


# In[258]:


id_7 = 'Cystic fibrosis transmembrane'
seq_7 = 'MQRSPLEKASVVSKLFFSWTRPILRKGYRQRLELSDIYQIPSVDSADNLSEKLEREWDRELASKKNPKLINALRRCFFWRFMFYGIFLYLGEVTKAVQPLLLGRIIASYDPDNKEERSIAIYLGIGLCLLFIVRTLLLHPAIFGLHHIGMQMRIAMFSLIYKKTLKLSSRVLDKISIGQLVSLLSNNLNKFDEGLALAHFVWIAPLQVALLMGLIWELLQASAFCGLGFLIVLALFQAGLGRMMMKYRDQRAGKISERLVITSEMIENIQSVKAYCWEEAMEKMIENLRQTELKLTRKAAYVRYFNSSAFFFSGFFVVFLSVLPYALIKGIILRKIFTTISFCIVLRMAVTRQFPWAVQTWYDSLGAINKIQDFLQKQEYKTLEYNLTTTEVVMENVTAFWEEGFGELFEKAKQNNNNRKTSNGDDSLFFSNFSLLGTPVLKDINFKIERGQLLAVAGSTGAGKTSLLMVIMGELEPSEGKIKHSGRISFCSQFSWIMPGTIKENIIFGVSYDEYRYRSVIKACQLEEDISKFAEKDNIVLGEGGITLSGGQRARISLARAVYKDADLYLLDSPFGYLDVLTEKEIFESCVCKLMANKTRILVTSKMEHLKKADKILILHEGSSYFYGTFSELQNLQPDFSSKLMGCDSFDQFSAERRNSILTETLHRFSLEGDAPVSWTETKKQSFKQTGEFGEKRKNSILNPINSIRKFSIVQKTPLQMNGIEEDSDEPLERRLSLVPDSEQGEAILPRISVISTGPTLQARRRQSVLNLMTHSVNQGQNIHRKTTASTRKVSLAPQANLTELDIYSRRLSQETGLEISEEINEEDLKECFFDDMESIPAVTTWNTYLRYITVHKSLIFVLIWCLVIFLAEVAASLVVLWLLGNTPLQDKGNSTHSRNNSYAVIITSTSSYYVFYIYVGVADTLLAMGFFRGLPLVHTLITVSKILHHKMLHSVLQAPMSTLNTLKAGGILNRFSKDIAILDDLLPLTIFDFIQLLLIVIGAIAVVAVLQPYIFVATVPVIVAFIMLRAYFLQTSQQLKQLESEGRSPIFTHLVTSLKGLWTLRAFGRQPYFETLFHKALNLHTANWFLYLSTLRWFQMRIEMIFVIFFIAVTFISILTTGEGEGRVGIILTLAMNIMSTLQWAVNSSIDVDSLMRSVSRVFKFIDMPTEGKPTKSTKPYKNGQLSKVMIIENSHVMQRSPLEKASVVSKLFFSWTRPILRKGYRQRLELSDIYQIPSVDSADNLSEKLEREWDRELASKKNPKLINALRRCFFWRFMFYGIFLYLGEVTKAVQPLLLGRIIASYDPDNKEERSIAIYLGIGLCLLFIVRTLLLHPAIFGLHHIGMQMRIAMFSLIYKKTLKLSSRVLDKISIGQLVSLLSNNLNKFDEGLALAHFVWIAPLQVALLMGLIWELLQASAFCGLGFLIVLALFQAGLGRMMMKYRDQRAGKISERLVITSEMIENIQSVKAYCWEEAMEKMIENLRQTELKLTRKAAYVRYFNSSAFFFSGFFVVFLSVLPYALIKGIILRKIFTTISFCIVLRMAVTRQFPWAVQTWYDSLGAINKIQDFLQKQEYKTLEYNLTTTEVVMENVTAFWEEGFGELFEKAKQNNNNRKTSNGDDSLFFSNFSLLGTPVLKDINFKIERGQLLAVAGSTGAGKTSLLMVIMGELEPSEGKIKHSGRISFCSQFSWIMPGTIKENIIFGVSYDEYRYRSVIKACQLEEDISKFAEKDNIVLGEGGITLSGGQRARISLARAVYKDADLYLLDSPFGYLDVLTEKEIFESCVCKLMANKTRILVTSKMEHLKKADKILILHEGSSYFYGTFSELQNLQPDFSSKLMGCDSFDQFSAERRNSILTETLHRFSLEGDAPVSWTETKKQSFKQTGEFGEKRKNSILNPINSIRKFSIVQKTPLQMNGIEEDSDEPLERRLSLVPDSEQGEAILPRISVISTGPTLQARRRQSVLNLMTHSVNQGQNIHRKTTASTRKVSLAPQANLTELDIYSRRLSQETGLEISEEINEEDLKECFFDDMESIPAVTTWNTYLRYITVHKSLIFVLIWCLVIFLAEVAASLVVLWLLGNTPLQDKGNSTHSRNNSYAVIITSTSSYYVFYIYVGVADTLLAMGFFRGLPLVHTLITVSKILHHKMLHSVLQAPMSTLNTLKAGGILNRFSKDIAILDDLLPLTIFDFIQLLLIVIGAIAVVAVLQPYIFVATVPVIVAFIMLRAYFLQTSQQLKQLESEGRSPIFTHLVTSLKGLWTLRAFGRQPYFETLFHKALNLHTANWFLYLSTLRWFQMRIEMIFVIFFIAVTFISILTTGEGEGRVGIILTLAMNIMSTLQWAVNSSIDVDSLMRSVSRVFKFIDMPTEGKPTKSTKPYKNGQLSKVMIIENSHV'


# # MY IDEA ---> CGR for protein sequences

# In[259]:


def get_nt_and_location_give_pos(x,y,nt):
    AA = ['G','A','V','L','I','W','C','M','F','P','N','Q','Y','S','T','D','E','R','K','H']
    coordinates = [(0.0,1.0),(0.3090169943749474,0.9510565162951535),(0.5877852522924731,0.8090169943749475),(0.80901699437494742410229341718282,0.58778525229247312916870595463907),(0.9510565162951535,0.30901699437494745),(1.0,0.0),(0.0,-1.0),(0.3090169943749474,-0.9510565162951535),(0.5877852522924731,-0.8090169943749475),(0.80901699437494742410229341718282,-0.58778525229247312916870595463907),(0.9510565162951535,-0.30901699437494745),(-0.3090169943749474,-0.9510565162951535),(-0.5877852522924731,-0.8090169943749475),               (-0.80901699437494742410229341718282,-0.58778525229247312916870595463907),(-0.9510565162951535,-0.30901699437494745),(-1.0,0.0),(-0.3090169943749474,0.9510565162951535),(-0.5877852522924731,0.8090169943749475),(-0.80901699437494742410229341718282,0.58778525229247312916870595463907),(-0.9510565162951535,0.30901699437494745)]
    for counter in range(0,20):
        
        if nt == AA[counter]:
            x_w,y_w = coordinates[counter]
            x = (x+x_w)/2
            y = (y+y_w)/2
            
    return(x,y)





# In[260]:


def get_seq_give_posx_posy(seq,frame):
    
    # we start from center
    x ,y ,z= 0 ,0 ,0
    
    
    #pos_list = []
    #x_pos_list = []
    #y_pos_list = []
    #z_pos_list = []
    ########## this is to show circular frame ###############
    if frame == 'circular':
        pos_list = [(0.0,1.0),(0.3090169943749474,0.9510565162951535),(0.5877852522924731,0.8090169943749475),(0.80901699437494742410229341718282,0.58778525229247312916870595463907),(0.9510565162951535,0.30901699437494745),(1.0,0.0),(0.0,-1.0),(0.3090169943749474,-0.9510565162951535),(0.5877852522924731,-0.8090169943749475),(0.80901699437494742410229341718282,-0.58778525229247312916870595463907),(0.9510565162951535,-0.30901699437494745),(-0.3090169943749474,-0.9510565162951535),(-0.5877852522924731,-0.8090169943749475),               (-0.80901699437494742410229341718282,-0.58778525229247312916870595463907),(-0.9510565162951535,-0.30901699437494745),(-1.0,0.0),(-0.3090169943749474,0.9510565162951535),(-0.5877852522924731,0.8090169943749475),(-0.80901699437494742410229341718282,0.58778525229247312916870595463907),(-0.9510565162951535,0.30901699437494745)]
        x_pos_list = [0.0,0.3090169943749474,0.5877852522924731,0.8090169943749475,0.9510565162951535,1.0,0.0,0.3090169943749474,0.5877852522924731,0.8090169943749475,0.9510565162951535,-0.3090169943749474,-0.5877852522924731,-0.8090169943749475,-0.9510565162951535,-1.0,-0.3090169943749474,-0.5877852522924731,-0.8090169943749475,-0.9510565162951535]
        y_pos_list = [1.0,0.9510565162951535,0.8090169943749475,0.5877852522924731,0.30901699437494745,0.0,-1.0,-0.9510565162951535,-0.8090169943749475,-0.5877852522924731,-0.30901699437494745,-0.9510565162951535,-0.8090169943749475,-0.5877852522924731,-0.30901699437494745,0.0,0.9510565162951535,0.8090169943749475,0.5877852522924731,0.30901699437494745]
        z_pos_list = [0,0,0,0,0]
    
    
    ############## this is to show the frame ################
    if frame == 'regular':
        pos_list = [(1,1),(1,-1),(-1,-1),(-1,1),(0,0)]
        x_pos_list = [1,1,-1,-1,0]
        y_pos_list = [1,-1,-1,1,0]
        z_pos_list = [0,0,0,0,0]
    
    ########################################################
    
    for nt in seq:
        #print(nt)

        x,y = get_nt_and_location_give_pos(x,y,nt)
        z = z+1
        
        #print(x,y)
        pos_list.append((x,y))
        x_pos_list.append(x)
        y_pos_list.append(y)
        z_pos_list.append(z)


    return(pos_list,x_pos_list,y_pos_list,z_pos_list)


# # show the plot

# In[261]:


import matplotlib.pyplot as plt
def show_plot(x_pos_list,y_pos_list):
    plt.scatter(x_pos_list, y_pos_list)
    plt.show()


# In[262]:


def final_def(seq,frame):

    pos_list,x_pos_list,y_pos_list ,z_pos_list= get_seq_give_posx_posy(seq,frame)
    show_plot(x_pos_list,y_pos_list)
    z_pos_list =np.random.rand(len(pos_list),len(pos_list))
    fig, ax = plt.subplots()
    ax.pcolormesh(x_pos_list, y_pos_list, z_pos_list)
    


# # now its time to see the results

# In[263]:


final_def(seq_1,'circular')


# In[264]:


final_def(seq_2,'circular')


# In[265]:


final_def(seq_3,'circular')


# In[266]:


final_def(seq_4,'circular')


# In[267]:


final_def(seq_5,'circular')


# In[268]:


final_def(seq_6,'circular')


# In[269]:


final_def(seq_7,'circular')


# In[ ]:




